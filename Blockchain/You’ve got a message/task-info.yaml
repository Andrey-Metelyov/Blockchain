type: edu
custom_name: stage4
files:
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import blockchain.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() < 12) {
                throw new BlockParseException("Every block should " +
                    "contain at least 12 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(9).startsWith("Block data:")) {
                throw new BlockParseException("10-th line of every block " +
                    "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {
        public BlockchainTest() {
            super(Main.class);
        }

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                    "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/StringUtil.java
  visible: true
  text: |-
    package blockchain;

    import java.security.MessageDigest;

    class StringUtil {
        /* Applies Sha256 to a string and returns a hash. */
        public static String applySha256(String input){
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                /* Applies sha256 to our input */
                byte[] hash = digest.digest(input.getBytes("UTF-8"));
                StringBuilder hexString = new StringBuilder();
                for (byte elem: hash) {
                    String hex = Integer.toHexString(0xff & elem);
                    if(hex.length() == 1) hexString.append('0');
                    hexString.append(hex);
                }
                return hexString.toString();
            }
            catch(Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
  learner_created: true
- name: src/blockchain/BlockchainUtil.java
  visible: true
  text: |
    package blockchain;

    public class BlockchainUtil {
        public static Block generate(long id, String prevHash, int zeroesNeeded) {
    //        System.out.println("start generating block: id=" + id + " prevHash=" + prevHash + " zeroes needed=" + zeroesNeeded);
            return new Block(id, zeroesNeeded, prevHash, "");
        }
    }
  learner_created: true
- name: src/blockchain/MessageSender.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/50/stages/274/implement
status: Failed
feedback:
  message: |-
    Error in test #2

    In this test, the program is running for a long time, more than 15 seconds. Most likely, the program has gone into an infinite loop.

    Please find below the output of your program during this failed test.

    ---

    Block:
    Created by miner # 4
    Id: 1
    Timestamp: 1597128091417
    Magic number: -3752199623969987876
    Hash of the previous block:
    0
    Hash of the block:
    0000018685c724192e2160c4a45c2c3f45da03e3640f6dc87130906bc6ffc9aa
    Block data: no messages
    Block was generating for 1 seconds
    N stays the same

    Block:
    Created by miner # 4
    Id: 2
    Timestamp: 1597128094941
    Magic number: 4476021589619770849
    Hash of the previous block:
    0000018685c724192e2160c4a45c2c3f45da03e3640f6dc87130906bc6ffc9aa
    Hash of the block:
    00000ed071cc262b2906b08481591e41a3c594e830bd8cac76df6c9d28295c34
    Block data:
    Sarah: You always will be first because it is your blockchain!
    Nick: You&#39;re welcome :)
    Sarah: Anyway, thank you for this amazing chat.
    Tom: Anyway, thank you for this amazing chat.
    Sarah: It&#39;s not fair!
    Tom: It&#39;s not fair!
    Tom: Hey Tom, nice chat
    Block was generating for 3 seconds
    N stays the same

    Block:
    Created by miner # 7
    Id: 6
    Timestamp: 1597128098416
    Magic number: -2021843794379368328
    Hash of the previous block:
    000001a9f8486be539d89fc8ab1ae6ec98bb0db4dcd2a79990a6a44371edb151
    Hash of the block:
    000004c9104f3ec195638237778bde18e1b58bc2ae51336d2fc9cfcaaf804428
    Block data:
    Sarah: Anyway, thank you for this amazing chat.
    Block was generating for 10 seconds
    N was decreased by 1

    Block:
    Created by miner # 3
    Id: 3
    Timestamp: 1597128099672
    Magic number: -4996537885918518157
    Hash of the previous block:
    00000ed071cc262b2906b08481591e41a3c594e830bd8cac76df6c9d28295c34
    Hash of the block:
    00000a55c728f4bc3e9ad7b13a0e4b800150d027c1d9bba7fe1a32ac5de6267d
    Block data:
    Tom: Hey, I&#39;m first!
    Tom: You&#39;re welcome :)
    Sarah: You&#39;re welcome :)
    Nick: You always will be first because it is your blockchain!
    Nick: Anyway, thank you for this amazing chat.
    Tom: It&#39;s not fair!
    Nick: It&#39;s not fair!
    Sarah: Anyway, thank you for this amazing chat.
    Nick: It&#39;s not fair!
    Block was generating for 4 seconds
    N stays the same

    Block:
    Created by miner # 1
    Id: 4
    Timestamp: 1597128101844
    Magic number: 3104056366107352339
    Hash of the previous block:
    00000a55c728f4bc3e9ad7b13a0e4b800150d027c1d9bba7fe1a32ac5de6267d
    Hash of the block:
    00000e766e5ee80d43d2ffc9567e508d3e52025f48e866da7500fa04504f341c
    Block data:
    Nick: Anyway, thank you for this amazing chat.
    Nick: You&#39;re welcome :)
    Nick: You always will be first because it is your blockchain!
    Sarah: Hey Tom, nice chat
    Block was generating for 2 seconds
    N stays the same

    Block:
    Created by miner # 3
    Id: 5
    Timestamp: 1597128104020
    Magic number: -607116661596075708
    Hash of the previous block:
    00000e766e5ee80d43d2ffc9567e508d3e52025f48e866da7500fa04504f341c
    Hash of the block:
    000006c58559f131291b2cd4ea6949dd392f6fbacd27443dfae7a1f122b706e3
    Block data:
    Nick: Anyway, thank you for this amazing chat.
    Tom: Hey Tom, nice chat
    Nick: You always will be first because it is your blockchain!
    Sarah: Hey Tom, nice chat
    Sarah: You&#39;re welcome :)
    Block was generating for 2 seconds
    N stays the same

    Block:
    Created by miner # 3
    Id: 6
    Timestamp: 1597128104054
    Magic number: -7110536114668879455
    Hash of the previous block:
    000006c58559f131291b2cd4ea6949dd392f6fbacd27443dfae7a1f122b706e3
    Hash of the block:
    0000089e36bb0894e58ff26bcd24c318b7526725b9857593f5ac8f0833ee57f5
    Block data: no messages
    Block was generating for 0 seconds
    N was increased to 6

    ----- SHUTDOWN!!! -----
  time: Tue, 11 Aug 2020 06:41:46 UTC
record: -1
